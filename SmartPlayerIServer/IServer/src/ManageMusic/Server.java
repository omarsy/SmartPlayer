// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `manageMusic.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package ManageMusic;

public class Server implements java.lang.Cloneable, java.io.Serializable
{
    public String nom;

    public int id;

    public Server()
    {
        nom = "";
    }

    public Server(String nom, int id)
    {
        this.nom = nom;
        this.id = id;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Server _r = null;
        if(rhs instanceof Server)
        {
            _r = (Server)rhs;
        }

        if(_r != null)
        {
            if(nom != _r.nom)
            {
                if(nom == null || _r.nom == null || !nom.equals(_r.nom))
                {
                    return false;
                }
            }
            if(id != _r.id)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::ManageMusic::Entity.Server");
        __h = IceInternal.HashUtil.hashAdd(__h, nom);
        __h = IceInternal.HashUtil.hashAdd(__h, id);
        return __h;
    }

    public Server
    clone()
    {
        Server c = null;
        try
        {
            c = (Server)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(nom);
        __os.writeInt(id);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        nom = __is.readString();
        id = __is.readInt();
    }

    static public void
    __write(IceInternal.BasicStream __os, Server __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public Server
    __read(IceInternal.BasicStream __is, Server __v)
    {
        if(__v == null)
        {
             __v = new Server();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final Server __nullMarshalValue = new Server();

    public static final long serialVersionUID = 1201124847L;
}
