# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.3
#
# <auto-generated>
#
# Generated from file `manageMusic.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module ManageMusic
_M_ManageMusic = Ice.openModule('ManageMusic')
__name__ = 'ManageMusic'

if 'Sound' not in _M_ManageMusic.__dict__:
    _M_ManageMusic.Sound = Ice.createTempClass()
    class Sound(object):
        def __init__(self, titre='', album='', cover='', artist=''):
            self.titre = titre
            self.album = album
            self.cover = cover
            self.artist = artist

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.titre)
            _h = 5 * _h + Ice.getHash(self.album)
            _h = 5 * _h + Ice.getHash(self.cover)
            _h = 5 * _h + Ice.getHash(self.artist)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_ManageMusic.Sound):
                return NotImplemented
            else:
                if self.titre is None or other.titre is None:
                    if self.titre != other.titre:
                        return (-1 if self.titre is None else 1)
                else:
                    if self.titre < other.titre:
                        return -1
                    elif self.titre > other.titre:
                        return 1
                if self.album is None or other.album is None:
                    if self.album != other.album:
                        return (-1 if self.album is None else 1)
                else:
                    if self.album < other.album:
                        return -1
                    elif self.album > other.album:
                        return 1
                if self.cover is None or other.cover is None:
                    if self.cover != other.cover:
                        return (-1 if self.cover is None else 1)
                else:
                    if self.cover < other.cover:
                        return -1
                    elif self.cover > other.cover:
                        return 1
                if self.artist is None or other.artist is None:
                    if self.artist != other.artist:
                        return (-1 if self.artist is None else 1)
                else:
                    if self.artist < other.artist:
                        return -1
                    elif self.artist > other.artist:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_ManageMusic._t_Sound)

        __repr__ = __str__

    _M_ManageMusic._t_Sound = IcePy.defineStruct('::ManageMusic::Sound', Sound, (), (
        ('titre', (), IcePy._t_string),
        ('album', (), IcePy._t_string),
        ('cover', (), IcePy._t_string),
        ('artist', (), IcePy._t_string)
    ))

    _M_ManageMusic.Sound = Sound
    del Sound

if 'Server' not in _M_ManageMusic.__dict__:
    _M_ManageMusic.Server = Ice.createTempClass()
    class Server(object):
        def __init__(self, nom='', id=0):
            self.nom = nom
            self.id = id

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.nom)
            _h = 5 * _h + Ice.getHash(self.id)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_ManageMusic.Server):
                return NotImplemented
            else:
                if self.nom is None or other.nom is None:
                    if self.nom != other.nom:
                        return (-1 if self.nom is None else 1)
                else:
                    if self.nom < other.nom:
                        return -1
                    elif self.nom > other.nom:
                        return 1
                if self.id is None or other.id is None:
                    if self.id != other.id:
                        return (-1 if self.id is None else 1)
                else:
                    if self.id < other.id:
                        return -1
                    elif self.id > other.id:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_ManageMusic._t_Server)

        __repr__ = __str__

    _M_ManageMusic._t_Server = IcePy.defineStruct('::ManageMusic::Server', Server, (), (
        ('nom', (), IcePy._t_string),
        ('id', (), IcePy._t_int)
    ))

    _M_ManageMusic.Server = Server
    del Server

if '_t_Servers' not in _M_ManageMusic.__dict__:
    _M_ManageMusic._t_Servers = IcePy.defineSequence('::ManageMusic::Servers', (), _M_ManageMusic._t_Server)

if '_t_Sounds' not in _M_ManageMusic.__dict__:
    _M_ManageMusic._t_Sounds = IcePy.defineSequence('::ManageMusic::Sounds', (), _M_ManageMusic._t_Sound)

if 'ManageFile' not in _M_ManageMusic.__dict__:
    _M_ManageMusic.ManageFile = Ice.createTempClass()
    class ManageFile(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_ManageMusic.ManageFile:
                raise RuntimeError('ManageMusic.ManageFile is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::ManageMusic::ManageFile')

        def ice_id(self, current=None):
            return '::ManageMusic::ManageFile'

        def ice_staticId():
            return '::ManageMusic::ManageFile'
        ice_staticId = staticmethod(ice_staticId)

        def delete(self, path, id, current=None):
            pass

        def newMusic(self, sound, url, id, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_ManageMusic._t_ManageFile)

        __repr__ = __str__

    _M_ManageMusic.ManageFilePrx = Ice.createTempClass()
    class ManageFilePrx(Ice.ObjectPrx):

        def delete(self, path, id, _ctx=None):
            return _M_ManageMusic.ManageFile._op_delete.invoke(self, ((path, id), _ctx))

        def begin_delete(self, path, id, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ManageMusic.ManageFile._op_delete.begin(self, ((path, id), _response, _ex, _sent, _ctx))

        def end_delete(self, _r):
            return _M_ManageMusic.ManageFile._op_delete.end(self, _r)

        def newMusic(self, sound, url, id, _ctx=None):
            return _M_ManageMusic.ManageFile._op_newMusic.invoke(self, ((sound, url, id), _ctx))

        def begin_newMusic(self, sound, url, id, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ManageMusic.ManageFile._op_newMusic.begin(self, ((sound, url, id), _response, _ex, _sent, _ctx))

        def end_newMusic(self, _r):
            return _M_ManageMusic.ManageFile._op_newMusic.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_ManageMusic.ManageFilePrx.ice_checkedCast(proxy, '::ManageMusic::ManageFile', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_ManageMusic.ManageFilePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::ManageMusic::ManageFile'
        ice_staticId = staticmethod(ice_staticId)

    _M_ManageMusic._t_ManageFilePrx = IcePy.defineProxy('::ManageMusic::ManageFile', ManageFilePrx)

    _M_ManageMusic._t_ManageFile = IcePy.defineClass('::ManageMusic::ManageFile', ManageFile, -1, (), True, False, None, (), ())
    ManageFile._ice_type = _M_ManageMusic._t_ManageFile

    ManageFile._op_delete = IcePy.Operation('delete', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), None, ())
    ManageFile._op_newMusic = IcePy.Operation('newMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_ManageMusic._t_Sound, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), None, ())

    _M_ManageMusic.ManageFile = ManageFile
    del ManageFile

    _M_ManageMusic.ManageFilePrx = ManageFilePrx
    del ManageFilePrx

if 'Network' not in _M_ManageMusic.__dict__:
    _M_ManageMusic.Network = Ice.createTempClass()
    class Network(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_ManageMusic.Network:
                raise RuntimeError('ManageMusic.Network is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::ManageMusic::Network')

        def ice_id(self, current=None):
            return '::ManageMusic::Network'

        def ice_staticId():
            return '::ManageMusic::Network'
        ice_staticId = staticmethod(ice_staticId)

        def inscription(self, name, current=None):
            pass

        def changeIp(self, ip, id, current=None):
            pass

        def deconnexion(self, id, current=None):
            pass

        def connexion(self, ip, id, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_ManageMusic._t_Network)

        __repr__ = __str__

    _M_ManageMusic.NetworkPrx = Ice.createTempClass()
    class NetworkPrx(Ice.ObjectPrx):

        def inscription(self, name, _ctx=None):
            return _M_ManageMusic.Network._op_inscription.invoke(self, ((name, ), _ctx))

        def begin_inscription(self, name, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ManageMusic.Network._op_inscription.begin(self, ((name, ), _response, _ex, _sent, _ctx))

        def end_inscription(self, _r):
            return _M_ManageMusic.Network._op_inscription.end(self, _r)

        def changeIp(self, ip, id, _ctx=None):
            return _M_ManageMusic.Network._op_changeIp.invoke(self, ((ip, id), _ctx))

        def begin_changeIp(self, ip, id, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ManageMusic.Network._op_changeIp.begin(self, ((ip, id), _response, _ex, _sent, _ctx))

        def end_changeIp(self, _r):
            return _M_ManageMusic.Network._op_changeIp.end(self, _r)

        def deconnexion(self, id, _ctx=None):
            return _M_ManageMusic.Network._op_deconnexion.invoke(self, ((id, ), _ctx))

        def begin_deconnexion(self, id, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ManageMusic.Network._op_deconnexion.begin(self, ((id, ), _response, _ex, _sent, _ctx))

        def end_deconnexion(self, _r):
            return _M_ManageMusic.Network._op_deconnexion.end(self, _r)

        def connexion(self, ip, id, _ctx=None):
            return _M_ManageMusic.Network._op_connexion.invoke(self, ((ip, id), _ctx))

        def begin_connexion(self, ip, id, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ManageMusic.Network._op_connexion.begin(self, ((ip, id), _response, _ex, _sent, _ctx))

        def end_connexion(self, _r):
            return _M_ManageMusic.Network._op_connexion.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_ManageMusic.NetworkPrx.ice_checkedCast(proxy, '::ManageMusic::Network', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_ManageMusic.NetworkPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::ManageMusic::Network'
        ice_staticId = staticmethod(ice_staticId)

    _M_ManageMusic._t_NetworkPrx = IcePy.defineProxy('::ManageMusic::Network', NetworkPrx)

    _M_ManageMusic._t_Network = IcePy.defineClass('::ManageMusic::Network', Network, -1, (), True, False, None, (), ())
    Network._ice_type = _M_ManageMusic._t_Network

    Network._op_inscription = IcePy.Operation('inscription', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_int, False, 0), ())
    Network._op_changeIp = IcePy.Operation('changeIp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), None, ())
    Network._op_deconnexion = IcePy.Operation('deconnexion', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    Network._op_connexion = IcePy.Operation('connexion', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), None, ())

    _M_ManageMusic.Network = Network
    del Network

    _M_ManageMusic.NetworkPrx = NetworkPrx
    del NetworkPrx

if 'Request' not in _M_ManageMusic.__dict__:
    _M_ManageMusic.Request = Ice.createTempClass()
    class Request(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_ManageMusic.Request:
                raise RuntimeError('ManageMusic.Request is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::ManageMusic::Request')

        def ice_id(self, current=None):
            return '::ManageMusic::Request'

        def ice_staticId():
            return '::ManageMusic::Request'
        ice_staticId = staticmethod(ice_staticId)

        def getServers(self, current=None):
            pass

        def getAllSounds(self, current=None):
            pass

        def getSoundsByServer(self, idServer, current=None):
            pass

        def getSoundByArtist(self, artist, current=None):
            pass

        def getSoundByAlbum(self, artist, current=None):
            pass

        def deleteSound(self, sound, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_ManageMusic._t_Request)

        __repr__ = __str__

    _M_ManageMusic.RequestPrx = Ice.createTempClass()
    class RequestPrx(Ice.ObjectPrx):

        def getServers(self, _ctx=None):
            return _M_ManageMusic.Request._op_getServers.invoke(self, ((), _ctx))

        def begin_getServers(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ManageMusic.Request._op_getServers.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getServers(self, _r):
            return _M_ManageMusic.Request._op_getServers.end(self, _r)

        def getAllSounds(self, _ctx=None):
            return _M_ManageMusic.Request._op_getAllSounds.invoke(self, ((), _ctx))

        def begin_getAllSounds(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ManageMusic.Request._op_getAllSounds.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getAllSounds(self, _r):
            return _M_ManageMusic.Request._op_getAllSounds.end(self, _r)

        def getSoundsByServer(self, idServer, _ctx=None):
            return _M_ManageMusic.Request._op_getSoundsByServer.invoke(self, ((idServer, ), _ctx))

        def begin_getSoundsByServer(self, idServer, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ManageMusic.Request._op_getSoundsByServer.begin(self, ((idServer, ), _response, _ex, _sent, _ctx))

        def end_getSoundsByServer(self, _r):
            return _M_ManageMusic.Request._op_getSoundsByServer.end(self, _r)

        def getSoundByArtist(self, artist, _ctx=None):
            return _M_ManageMusic.Request._op_getSoundByArtist.invoke(self, ((artist, ), _ctx))

        def begin_getSoundByArtist(self, artist, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ManageMusic.Request._op_getSoundByArtist.begin(self, ((artist, ), _response, _ex, _sent, _ctx))

        def end_getSoundByArtist(self, _r):
            return _M_ManageMusic.Request._op_getSoundByArtist.end(self, _r)

        def getSoundByAlbum(self, artist, _ctx=None):
            return _M_ManageMusic.Request._op_getSoundByAlbum.invoke(self, ((artist, ), _ctx))

        def begin_getSoundByAlbum(self, artist, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ManageMusic.Request._op_getSoundByAlbum.begin(self, ((artist, ), _response, _ex, _sent, _ctx))

        def end_getSoundByAlbum(self, _r):
            return _M_ManageMusic.Request._op_getSoundByAlbum.end(self, _r)

        def deleteSound(self, sound, _ctx=None):
            return _M_ManageMusic.Request._op_deleteSound.invoke(self, ((sound, ), _ctx))

        def begin_deleteSound(self, sound, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_ManageMusic.Request._op_deleteSound.begin(self, ((sound, ), _response, _ex, _sent, _ctx))

        def end_deleteSound(self, _r):
            return _M_ManageMusic.Request._op_deleteSound.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_ManageMusic.RequestPrx.ice_checkedCast(proxy, '::ManageMusic::Request', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_ManageMusic.RequestPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::ManageMusic::Request'
        ice_staticId = staticmethod(ice_staticId)

    _M_ManageMusic._t_RequestPrx = IcePy.defineProxy('::ManageMusic::Request', RequestPrx)

    _M_ManageMusic._t_Request = IcePy.defineClass('::ManageMusic::Request', Request, -1, (), True, False, None, (), ())
    Request._ice_type = _M_ManageMusic._t_Request

    Request._op_getServers = IcePy.Operation('getServers', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_ManageMusic._t_Servers, False, 0), ())
    Request._op_getAllSounds = IcePy.Operation('getAllSounds', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_ManageMusic._t_Sounds, False, 0), ())
    Request._op_getSoundsByServer = IcePy.Operation('getSoundsByServer', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), _M_ManageMusic._t_Sounds, False, 0), ())
    Request._op_getSoundByArtist = IcePy.Operation('getSoundByArtist', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_ManageMusic._t_Sounds, False, 0), ())
    Request._op_getSoundByAlbum = IcePy.Operation('getSoundByAlbum', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_ManageMusic._t_Sounds, False, 0), ())
    Request._op_deleteSound = IcePy.Operation('deleteSound', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_ManageMusic._t_Sound, False, 0),), (), None, ())

    _M_ManageMusic.Request = Request
    del Request

    _M_ManageMusic.RequestPrx = RequestPrx
    del RequestPrx

# End of module ManageMusic
