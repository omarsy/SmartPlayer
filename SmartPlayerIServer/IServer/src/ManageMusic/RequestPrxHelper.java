// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `manageMusic.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package ManageMusic;

/**
 * Provides type-specific helper functions.
 **/
public final class RequestPrxHelper extends Ice.ObjectPrxHelperBase implements RequestPrx
{
    private static final String __deleteSound_name = "deleteSound";

    public void deleteSound(Sound sound)
    {
        deleteSound(sound, null, false);
    }

    public void deleteSound(Sound sound, java.util.Map<String, String> __ctx)
    {
        deleteSound(sound, __ctx, true);
    }

    private void deleteSound(Sound sound, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_deleteSound(begin_deleteSound(sound, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_deleteSound(Sound sound)
    {
        return begin_deleteSound(sound, null, false, false, null);
    }

    public Ice.AsyncResult begin_deleteSound(Sound sound, java.util.Map<String, String> __ctx)
    {
        return begin_deleteSound(sound, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_deleteSound(Sound sound, Ice.Callback __cb)
    {
        return begin_deleteSound(sound, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_deleteSound(Sound sound, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_deleteSound(sound, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_deleteSound(Sound sound, Callback_Request_deleteSound __cb)
    {
        return begin_deleteSound(sound, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_deleteSound(Sound sound, java.util.Map<String, String> __ctx, Callback_Request_deleteSound __cb)
    {
        return begin_deleteSound(sound, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_deleteSound(Sound sound, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_deleteSound(sound, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_deleteSound(Sound sound, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_deleteSound(sound, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_deleteSound(Sound sound, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_deleteSound(sound, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_deleteSound(Sound sound, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_deleteSound(sound, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_deleteSound(Sound sound, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.Functional_VoidCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_deleteSound(sound, 
                                 __ctx, 
                                 __explicitCtx, 
                                 __synchronous, 
                                 new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_deleteSound(Sound sound, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__deleteSound_name, __cb);
        try
        {
            __result.prepare(__deleteSound_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            Sound.__write(__os, sound);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_deleteSound(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __deleteSound_name);
    }

    private static final String __getAllSounds_name = "getAllSounds";

    public Sound[] getAllSounds()
    {
        return getAllSounds(null, false);
    }

    public Sound[] getAllSounds(java.util.Map<String, String> __ctx)
    {
        return getAllSounds(__ctx, true);
    }

    private Sound[] getAllSounds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getAllSounds_name);
        return end_getAllSounds(begin_getAllSounds(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getAllSounds()
    {
        return begin_getAllSounds(null, false, false, null);
    }

    public Ice.AsyncResult begin_getAllSounds(java.util.Map<String, String> __ctx)
    {
        return begin_getAllSounds(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getAllSounds(Ice.Callback __cb)
    {
        return begin_getAllSounds(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getAllSounds(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getAllSounds(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getAllSounds(Callback_Request_getAllSounds __cb)
    {
        return begin_getAllSounds(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getAllSounds(java.util.Map<String, String> __ctx, Callback_Request_getAllSounds __cb)
    {
        return begin_getAllSounds(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getAllSounds(IceInternal.Functional_GenericCallback1<Sound[]> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getAllSounds(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getAllSounds(IceInternal.Functional_GenericCallback1<Sound[]> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getAllSounds(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getAllSounds(java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_GenericCallback1<Sound[]> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getAllSounds(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getAllSounds(java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_GenericCallback1<Sound[]> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getAllSounds(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getAllSounds(java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.Functional_GenericCallback1<Sound[]> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getAllSounds(__ctx, __explicitCtx, __synchronous, 
                                  new IceInternal.Functional_TwowayCallbackArg1<ManageMusic.Sound[]>(__responseCb, __exceptionCb, __sentCb)
                                      {
                                          public final void __completed(Ice.AsyncResult __result)
                                          {
                                              RequestPrxHelper.__getAllSounds_completed(this, __result);
                                          }
                                      });
    }

    private Ice.AsyncResult begin_getAllSounds(java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getAllSounds_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getAllSounds_name, __cb);
        try
        {
            __result.prepare(__getAllSounds_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public Sound[] end_getAllSounds(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getAllSounds_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            Sound[] __ret;
            __ret = SoundsHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getAllSounds_completed(Ice.TwowayCallbackArg1<Sound[]> __cb, Ice.AsyncResult __result)
    {
        ManageMusic.RequestPrx __proxy = (ManageMusic.RequestPrx)__result.getProxy();
        Sound[] __ret = null;
        try
        {
            __ret = __proxy.end_getAllSounds(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getServers_name = "getServers";

    public Server[] getServers()
    {
        return getServers(null, false);
    }

    public Server[] getServers(java.util.Map<String, String> __ctx)
    {
        return getServers(__ctx, true);
    }

    private Server[] getServers(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getServers_name);
        return end_getServers(begin_getServers(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getServers()
    {
        return begin_getServers(null, false, false, null);
    }

    public Ice.AsyncResult begin_getServers(java.util.Map<String, String> __ctx)
    {
        return begin_getServers(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getServers(Ice.Callback __cb)
    {
        return begin_getServers(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getServers(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getServers(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getServers(Callback_Request_getServers __cb)
    {
        return begin_getServers(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getServers(java.util.Map<String, String> __ctx, Callback_Request_getServers __cb)
    {
        return begin_getServers(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getServers(IceInternal.Functional_GenericCallback1<Server[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getServers(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getServers(IceInternal.Functional_GenericCallback1<Server[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getServers(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getServers(java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<Server[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getServers(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getServers(java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<Server[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getServers(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getServers(java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.Functional_GenericCallback1<Server[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getServers(__ctx, __explicitCtx, __synchronous, 
                                new IceInternal.Functional_TwowayCallbackArg1<ManageMusic.Server[]>(__responseCb, __exceptionCb, __sentCb)
                                    {
                                        public final void __completed(Ice.AsyncResult __result)
                                        {
                                            RequestPrxHelper.__getServers_completed(this, __result);
                                        }
                                    });
    }

    private Ice.AsyncResult begin_getServers(java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getServers_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getServers_name, __cb);
        try
        {
            __result.prepare(__getServers_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public Server[] end_getServers(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getServers_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            Server[] __ret;
            __ret = ServersHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getServers_completed(Ice.TwowayCallbackArg1<Server[]> __cb, Ice.AsyncResult __result)
    {
        ManageMusic.RequestPrx __proxy = (ManageMusic.RequestPrx)__result.getProxy();
        Server[] __ret = null;
        try
        {
            __ret = __proxy.end_getServers(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getSoundByAlbum_name = "getSoundByAlbum";

    public Sound[] getSoundByAlbum(String artist)
    {
        return getSoundByAlbum(artist, null, false);
    }

    public Sound[] getSoundByAlbum(String artist, java.util.Map<String, String> __ctx)
    {
        return getSoundByAlbum(artist, __ctx, true);
    }

    private Sound[] getSoundByAlbum(String artist, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getSoundByAlbum_name);
        return end_getSoundByAlbum(begin_getSoundByAlbum(artist, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getSoundByAlbum(String artist)
    {
        return begin_getSoundByAlbum(artist, null, false, false, null);
    }

    public Ice.AsyncResult begin_getSoundByAlbum(String artist, java.util.Map<String, String> __ctx)
    {
        return begin_getSoundByAlbum(artist, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getSoundByAlbum(String artist, Ice.Callback __cb)
    {
        return begin_getSoundByAlbum(artist, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getSoundByAlbum(String artist, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getSoundByAlbum(artist, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getSoundByAlbum(String artist, Callback_Request_getSoundByAlbum __cb)
    {
        return begin_getSoundByAlbum(artist, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getSoundByAlbum(String artist, java.util.Map<String, String> __ctx, Callback_Request_getSoundByAlbum __cb)
    {
        return begin_getSoundByAlbum(artist, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getSoundByAlbum(String artist, 
                                                 IceInternal.Functional_GenericCallback1<Sound[]> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getSoundByAlbum(artist, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getSoundByAlbum(String artist, 
                                                 IceInternal.Functional_GenericCallback1<Sound[]> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getSoundByAlbum(artist, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getSoundByAlbum(String artist, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<Sound[]> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getSoundByAlbum(artist, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getSoundByAlbum(String artist, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<Sound[]> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getSoundByAlbum(artist, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getSoundByAlbum(String artist, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.Functional_GenericCallback1<Sound[]> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getSoundByAlbum(artist, __ctx, __explicitCtx, __synchronous, 
                                     new IceInternal.Functional_TwowayCallbackArg1<ManageMusic.Sound[]>(__responseCb, __exceptionCb, __sentCb)
                                         {
                                             public final void __completed(Ice.AsyncResult __result)
                                             {
                                                 RequestPrxHelper.__getSoundByAlbum_completed(this, __result);
                                             }
                                         });
    }

    private Ice.AsyncResult begin_getSoundByAlbum(String artist, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getSoundByAlbum_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getSoundByAlbum_name, __cb);
        try
        {
            __result.prepare(__getSoundByAlbum_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(artist);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public Sound[] end_getSoundByAlbum(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getSoundByAlbum_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            Sound[] __ret;
            __ret = SoundsHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getSoundByAlbum_completed(Ice.TwowayCallbackArg1<Sound[]> __cb, Ice.AsyncResult __result)
    {
        ManageMusic.RequestPrx __proxy = (ManageMusic.RequestPrx)__result.getProxy();
        Sound[] __ret = null;
        try
        {
            __ret = __proxy.end_getSoundByAlbum(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getSoundByArtist_name = "getSoundByArtist";

    public Sound[] getSoundByArtist(String artist)
    {
        return getSoundByArtist(artist, null, false);
    }

    public Sound[] getSoundByArtist(String artist, java.util.Map<String, String> __ctx)
    {
        return getSoundByArtist(artist, __ctx, true);
    }

    private Sound[] getSoundByArtist(String artist, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getSoundByArtist_name);
        return end_getSoundByArtist(begin_getSoundByArtist(artist, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getSoundByArtist(String artist)
    {
        return begin_getSoundByArtist(artist, null, false, false, null);
    }

    public Ice.AsyncResult begin_getSoundByArtist(String artist, java.util.Map<String, String> __ctx)
    {
        return begin_getSoundByArtist(artist, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getSoundByArtist(String artist, Ice.Callback __cb)
    {
        return begin_getSoundByArtist(artist, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getSoundByArtist(String artist, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getSoundByArtist(artist, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getSoundByArtist(String artist, Callback_Request_getSoundByArtist __cb)
    {
        return begin_getSoundByArtist(artist, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getSoundByArtist(String artist, java.util.Map<String, String> __ctx, Callback_Request_getSoundByArtist __cb)
    {
        return begin_getSoundByArtist(artist, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getSoundByArtist(String artist, 
                                                  IceInternal.Functional_GenericCallback1<Sound[]> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getSoundByArtist(artist, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getSoundByArtist(String artist, 
                                                  IceInternal.Functional_GenericCallback1<Sound[]> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getSoundByArtist(artist, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getSoundByArtist(String artist, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_GenericCallback1<Sound[]> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getSoundByArtist(artist, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getSoundByArtist(String artist, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_GenericCallback1<Sound[]> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getSoundByArtist(artist, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getSoundByArtist(String artist, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.Functional_GenericCallback1<Sound[]> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getSoundByArtist(artist, __ctx, __explicitCtx, __synchronous, 
                                      new IceInternal.Functional_TwowayCallbackArg1<ManageMusic.Sound[]>(__responseCb, __exceptionCb, __sentCb)
                                          {
                                              public final void __completed(Ice.AsyncResult __result)
                                              {
                                                  RequestPrxHelper.__getSoundByArtist_completed(this, __result);
                                              }
                                          });
    }

    private Ice.AsyncResult begin_getSoundByArtist(String artist, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getSoundByArtist_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getSoundByArtist_name, __cb);
        try
        {
            __result.prepare(__getSoundByArtist_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(artist);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public Sound[] end_getSoundByArtist(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getSoundByArtist_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            Sound[] __ret;
            __ret = SoundsHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getSoundByArtist_completed(Ice.TwowayCallbackArg1<Sound[]> __cb, Ice.AsyncResult __result)
    {
        ManageMusic.RequestPrx __proxy = (ManageMusic.RequestPrx)__result.getProxy();
        Sound[] __ret = null;
        try
        {
            __ret = __proxy.end_getSoundByArtist(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getSoundsByServer_name = "getSoundsByServer";

    public Sound[] getSoundsByServer(int idServer)
    {
        return getSoundsByServer(idServer, null, false);
    }

    public Sound[] getSoundsByServer(int idServer, java.util.Map<String, String> __ctx)
    {
        return getSoundsByServer(idServer, __ctx, true);
    }

    private Sound[] getSoundsByServer(int idServer, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getSoundsByServer_name);
        return end_getSoundsByServer(begin_getSoundsByServer(idServer, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getSoundsByServer(int idServer)
    {
        return begin_getSoundsByServer(idServer, null, false, false, null);
    }

    public Ice.AsyncResult begin_getSoundsByServer(int idServer, java.util.Map<String, String> __ctx)
    {
        return begin_getSoundsByServer(idServer, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getSoundsByServer(int idServer, Ice.Callback __cb)
    {
        return begin_getSoundsByServer(idServer, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getSoundsByServer(int idServer, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getSoundsByServer(idServer, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getSoundsByServer(int idServer, Callback_Request_getSoundsByServer __cb)
    {
        return begin_getSoundsByServer(idServer, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getSoundsByServer(int idServer, java.util.Map<String, String> __ctx, Callback_Request_getSoundsByServer __cb)
    {
        return begin_getSoundsByServer(idServer, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getSoundsByServer(int idServer, 
                                                   IceInternal.Functional_GenericCallback1<Sound[]> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getSoundsByServer(idServer, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getSoundsByServer(int idServer, 
                                                   IceInternal.Functional_GenericCallback1<Sound[]> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getSoundsByServer(idServer, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getSoundsByServer(int idServer, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<Sound[]> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getSoundsByServer(idServer, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getSoundsByServer(int idServer, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<Sound[]> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getSoundsByServer(idServer, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getSoundsByServer(int idServer, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.Functional_GenericCallback1<Sound[]> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getSoundsByServer(idServer, __ctx, __explicitCtx, __synchronous, 
                                       new IceInternal.Functional_TwowayCallbackArg1<ManageMusic.Sound[]>(__responseCb, __exceptionCb, __sentCb)
                                           {
                                               public final void __completed(Ice.AsyncResult __result)
                                               {
                                                   RequestPrxHelper.__getSoundsByServer_completed(this, __result);
                                               }
                                           });
    }

    private Ice.AsyncResult begin_getSoundsByServer(int idServer, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getSoundsByServer_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getSoundsByServer_name, __cb);
        try
        {
            __result.prepare(__getSoundsByServer_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(idServer);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public Sound[] end_getSoundsByServer(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getSoundsByServer_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            Sound[] __ret;
            __ret = SoundsHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getSoundsByServer_completed(Ice.TwowayCallbackArg1<Sound[]> __cb, Ice.AsyncResult __result)
    {
        ManageMusic.RequestPrx __proxy = (ManageMusic.RequestPrx)__result.getProxy();
        Sound[] __ret = null;
        try
        {
            __ret = __proxy.end_getSoundsByServer(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static RequestPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), RequestPrx.class, RequestPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static RequestPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), RequestPrx.class, RequestPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static RequestPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), RequestPrx.class, RequestPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static RequestPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), RequestPrx.class, RequestPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static RequestPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, RequestPrx.class, RequestPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static RequestPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, RequestPrx.class, RequestPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::ManageMusic::Request"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, RequestPrx v)
    {
        __os.writeProxy(v);
    }

    public static RequestPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            RequestPrxHelper result = new RequestPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
