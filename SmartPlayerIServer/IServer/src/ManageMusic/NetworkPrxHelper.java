// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `manageMusic.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package ManageMusic;

/**
 * Provides type-specific helper functions.
 **/
public final class NetworkPrxHelper extends Ice.ObjectPrxHelperBase implements NetworkPrx
{
    private static final String __changeIp_name = "changeIp";

    public void changeIp(String ip, int id)
    {
        changeIp(ip, id, null, false);
    }

    public void changeIp(String ip, int id, java.util.Map<String, String> __ctx)
    {
        changeIp(ip, id, __ctx, true);
    }

    private void changeIp(String ip, int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_changeIp(begin_changeIp(ip, id, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_changeIp(String ip, int id)
    {
        return begin_changeIp(ip, id, null, false, false, null);
    }

    public Ice.AsyncResult begin_changeIp(String ip, int id, java.util.Map<String, String> __ctx)
    {
        return begin_changeIp(ip, id, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_changeIp(String ip, int id, Ice.Callback __cb)
    {
        return begin_changeIp(ip, id, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_changeIp(String ip, int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_changeIp(ip, id, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_changeIp(String ip, int id, Callback_Network_changeIp __cb)
    {
        return begin_changeIp(ip, id, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_changeIp(String ip, int id, java.util.Map<String, String> __ctx, Callback_Network_changeIp __cb)
    {
        return begin_changeIp(ip, id, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_changeIp(String ip, 
                                          int id, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_changeIp(ip, id, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_changeIp(String ip, 
                                          int id, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_changeIp(ip, id, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_changeIp(String ip, 
                                          int id, 
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_changeIp(ip, id, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_changeIp(String ip, 
                                          int id, 
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_changeIp(ip, id, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_changeIp(String ip, 
                                           int id, 
                                           java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_changeIp(ip, 
                              id, 
                              __ctx, 
                              __explicitCtx, 
                              __synchronous, 
                              new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_changeIp(String ip, 
                                           int id, 
                                           java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__changeIp_name, __cb);
        try
        {
            __result.prepare(__changeIp_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(ip);
            __os.writeInt(id);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_changeIp(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __changeIp_name);
    }

    private static final String __connexion_name = "connexion";

    public void connexion(String ip, int id)
    {
        connexion(ip, id, null, false);
    }

    public void connexion(String ip, int id, java.util.Map<String, String> __ctx)
    {
        connexion(ip, id, __ctx, true);
    }

    private void connexion(String ip, int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_connexion(begin_connexion(ip, id, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_connexion(String ip, int id)
    {
        return begin_connexion(ip, id, null, false, false, null);
    }

    public Ice.AsyncResult begin_connexion(String ip, int id, java.util.Map<String, String> __ctx)
    {
        return begin_connexion(ip, id, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_connexion(String ip, int id, Ice.Callback __cb)
    {
        return begin_connexion(ip, id, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_connexion(String ip, int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_connexion(ip, id, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_connexion(String ip, int id, Callback_Network_connexion __cb)
    {
        return begin_connexion(ip, id, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_connexion(String ip, int id, java.util.Map<String, String> __ctx, Callback_Network_connexion __cb)
    {
        return begin_connexion(ip, id, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_connexion(String ip, 
                                           int id, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_connexion(ip, id, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_connexion(String ip, 
                                           int id, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_connexion(ip, id, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_connexion(String ip, 
                                           int id, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_connexion(ip, id, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_connexion(String ip, 
                                           int id, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_connexion(ip, id, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_connexion(String ip, 
                                            int id, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_connexion(ip, 
                               id, 
                               __ctx, 
                               __explicitCtx, 
                               __synchronous, 
                               new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_connexion(String ip, 
                                            int id, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__connexion_name, __cb);
        try
        {
            __result.prepare(__connexion_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(ip);
            __os.writeInt(id);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_connexion(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __connexion_name);
    }

    private static final String __deconnexion_name = "deconnexion";

    public void deconnexion(int id)
    {
        deconnexion(id, null, false);
    }

    public void deconnexion(int id, java.util.Map<String, String> __ctx)
    {
        deconnexion(id, __ctx, true);
    }

    private void deconnexion(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_deconnexion(begin_deconnexion(id, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_deconnexion(int id)
    {
        return begin_deconnexion(id, null, false, false, null);
    }

    public Ice.AsyncResult begin_deconnexion(int id, java.util.Map<String, String> __ctx)
    {
        return begin_deconnexion(id, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_deconnexion(int id, Ice.Callback __cb)
    {
        return begin_deconnexion(id, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_deconnexion(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_deconnexion(id, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_deconnexion(int id, Callback_Network_deconnexion __cb)
    {
        return begin_deconnexion(id, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_deconnexion(int id, java.util.Map<String, String> __ctx, Callback_Network_deconnexion __cb)
    {
        return begin_deconnexion(id, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_deconnexion(int id, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_deconnexion(id, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_deconnexion(int id, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_deconnexion(id, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_deconnexion(int id, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_deconnexion(id, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_deconnexion(int id, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_deconnexion(id, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_deconnexion(int id, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.Functional_VoidCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_deconnexion(id, 
                                 __ctx, 
                                 __explicitCtx, 
                                 __synchronous, 
                                 new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_deconnexion(int id, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__deconnexion_name, __cb);
        try
        {
            __result.prepare(__deconnexion_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_deconnexion(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __deconnexion_name);
    }

    private static final String __inscription_name = "inscription";

    public int inscription(String name)
    {
        return inscription(name, null, false);
    }

    public int inscription(String name, java.util.Map<String, String> __ctx)
    {
        return inscription(name, __ctx, true);
    }

    private int inscription(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__inscription_name);
        return end_inscription(begin_inscription(name, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_inscription(String name)
    {
        return begin_inscription(name, null, false, false, null);
    }

    public Ice.AsyncResult begin_inscription(String name, java.util.Map<String, String> __ctx)
    {
        return begin_inscription(name, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_inscription(String name, Ice.Callback __cb)
    {
        return begin_inscription(name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_inscription(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_inscription(name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_inscription(String name, Callback_Network_inscription __cb)
    {
        return begin_inscription(name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_inscription(String name, java.util.Map<String, String> __ctx, Callback_Network_inscription __cb)
    {
        return begin_inscription(name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_inscription(String name, 
                                             IceInternal.Functional_IntCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_inscription(name, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_inscription(String name, 
                                             IceInternal.Functional_IntCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_inscription(name, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_inscription(String name, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_IntCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_inscription(name, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_inscription(String name, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_IntCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_inscription(name, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_inscription(String name, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.Functional_IntCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_inscription(name, __ctx, __explicitCtx, __synchronous, 
                                 new IceInternal.Functional_TwowayCallbackInt(__responseCb, __exceptionCb, __sentCb)
                                     {
                                         public final void __completed(Ice.AsyncResult __result)
                                         {
                                             NetworkPrxHelper.__inscription_completed(this, __result);
                                         }
                                     });
    }

    private Ice.AsyncResult begin_inscription(String name, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__inscription_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__inscription_name, __cb);
        try
        {
            __result.prepare(__inscription_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(name);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public int end_inscription(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __inscription_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __inscription_completed(Ice.TwowayCallbackInt __cb, Ice.AsyncResult __result)
    {
        ManageMusic.NetworkPrx __proxy = (ManageMusic.NetworkPrx)__result.getProxy();
        int __ret = 0;
        try
        {
            __ret = __proxy.end_inscription(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static NetworkPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), NetworkPrx.class, NetworkPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static NetworkPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), NetworkPrx.class, NetworkPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static NetworkPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), NetworkPrx.class, NetworkPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static NetworkPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), NetworkPrx.class, NetworkPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static NetworkPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, NetworkPrx.class, NetworkPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static NetworkPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, NetworkPrx.class, NetworkPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::ManageMusic::Network"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, NetworkPrx v)
    {
        __os.writeProxy(v);
    }

    public static NetworkPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            NetworkPrxHelper result = new NetworkPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
